name: Publish to NPM

on:
  push:
    tags:
      - 'v*'

jobs:
  publish:
    runs-on: ubuntu-latest
    name: Publish Packages
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build packages
        run: pnpm build

      - name: Publish to NPM
        run: |
          # Source the shared package configuration
          source .github/scripts/package-config.sh

          # Configure npm authentication
          echo "//registry.npmjs.org/:_authToken=$NPM_ACCESS_TOKEN" > ~/.npmrc

          # Determine release type and extract prerelease identifier
          TAG_NAME="${{ github.ref_name }}"

          # Extract prerelease identifier (alpha, beta, rc, etc.) from version tag
          if [[ "$TAG_NAME" =~ v[0-9]+\.[0-9]+\.[0-9]+-(alpha|beta|rc|dev|canary|next)(\.[0-9]+)?$ ]]; then
            PRERELEASE_ID="${BASH_REMATCH[1]}"
            echo "🧪 Detected prerelease: $TAG_NAME (identifier: $PRERELEASE_ID)"
            PUBLISH_TAG="$PRERELEASE_ID"
            RELEASE_TYPE="prerelease"
          else
            echo "🚀 Detected stable release: $TAG_NAME"
            PUBLISH_TAG="latest"
            RELEASE_TYPE="stable"
          fi

          # Define the publish handler function
          process_publish() {
            local package_name="$1"
            local package_path="$2"
            
            echo "Publishing $package_path..."
            cd "$package_path"
            
            PACKAGE_NAME=$(node -p "require('./package.json').name")
            PACKAGE_VERSION=$(node -p "require('./package.json').version")
            
            # Check if this version is already published
            if npm view "$PACKAGE_NAME@$PACKAGE_VERSION" version 2>/dev/null; then
              echo "⚠️  Version $PACKAGE_VERSION of $PACKAGE_NAME is already published, skipping..."
            else
              # Convert workspace protocols to regular semver for publishing
              echo "🔄 Converting workspace protocols to semver ranges for publishing..."
              node -e "
                const fs = require('fs');
                const pkg = JSON.parse(fs.readFileSync('./package.json', 'utf8'));
                
                // Convert workspace protocols in dependencies
                ['dependencies', 'devDependencies', 'peerDependencies'].forEach(depType => {
                  if (pkg[depType]) {
                    Object.keys(pkg[depType]).forEach(dep => {
                      if (pkg[depType][dep].startsWith('workspace:')) {
                        pkg[depType][dep] = pkg[depType][dep].replace('workspace:', '');
                        console.log('Converted ' + dep + ' from workspace protocol');
                      }
                    });
                  }
                });
                
                fs.writeFileSync('./package.json', JSON.stringify(pkg, null, 2) + '\n');
              "
              
              if [ "$RELEASE_TYPE" = "prerelease" ]; then
                echo "🧪 Publishing $PACKAGE_NAME@$PACKAGE_VERSION as prerelease with @$PUBLISH_TAG tag..."
                npm publish --access public --tag "$PUBLISH_TAG"
              else
                echo "📦 Publishing $PACKAGE_NAME@$PACKAGE_VERSION as stable release..."
                npm publish --access public
              fi
              echo "✅ Successfully published $PACKAGE_NAME@$PACKAGE_VERSION ($RELEASE_TYPE)"
            fi
            
            cd ../..
          }

          # Process packages in the defined order (javascript first, then react)
          process_packages_in_order "publish"
        env:
          NPM_ACCESS_TOKEN: ${{ secrets.NPM_ACCESS_TOKEN }}

      - name: Publication Summary
        run: |
          # Source the shared package configuration
          source .github/scripts/package-config.sh

          echo "## 📦 Publication Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Published packages for tag: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Define the summary handler function
          process_summary() {
            local package_name="$1"
            local package_path="$2"
            
            cd "$package_path"
            PACKAGE_NAME=$(node -p "require('./package.json').name")
            PACKAGE_VERSION=$(node -p "require('./package.json').version")
            echo "- **$PACKAGE_NAME**: $PACKAGE_VERSION" >> $GITHUB_STEP_SUMMARY
            cd ../..
          }

          # Process packages in the defined order for summary
          process_packages_in_order "summary"
