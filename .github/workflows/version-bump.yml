name: Version Bump and Release

# To trigger the publish workflow automatically, create a Personal Access Token (PAT):
# 1. Go to GitHub Settings > Developer settings > Personal access tokens > Tokens (classic)
# 2. Generate a new token with 'repo' and 'workflow' scopes
# 3. Add it as a repository secret named 'PAT_TOKEN'
# Without PAT_TOKEN, the publish workflow won't be triggered automatically

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - major
          - minor
          - patch
          - premajor
          - preminor
          - prepatch
          - prerelease
      prerelease_id:
        description: 'Prerelease identifier (only used for prerelease versions)'
        required: false
        type: choice
        options:
          - alpha
          - beta
          - rc
          - dev
          - canary
          - next

jobs:
  version-bump:
    runs-on: ubuntu-latest
    name: Bump Version and Create Release
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Configure git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build packages
        run: pnpm build

      # - name: Run tests
      #   run: pnpm test

      - name: Bump version in root package.json
        id: version-root
        run: |
          VERSION_TYPE="${{ github.event.inputs.version_type }}"
          PRERELEASE_ID="${{ github.event.inputs.prerelease_id }}"

          # Handle prerelease versions
          if [[ "$VERSION_TYPE" == pre* ]]; then
            # Use default 'beta' if no prerelease_id is provided for prerelease versions
            if [[ -z "$PRERELEASE_ID" ]]; then
              PRERELEASE_ID="beta"
              echo "‚ö†Ô∏è  No prerelease identifier provided, defaulting to 'beta'"
            fi
            NEW_VERSION=$(npm version "$VERSION_TYPE" --preid="$PRERELEASE_ID" --no-git-tag-version)
            echo "üß™ Creating prerelease version with identifier: $PRERELEASE_ID"
            echo "is_prerelease=true" >> $GITHUB_OUTPUT
          else
            NEW_VERSION=$(npm version "$VERSION_TYPE" --no-git-tag-version)
            echo "üöÄ Creating stable release version"
            echo "is_prerelease=false" >> $GITHUB_OUTPUT
          fi

          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "Root package.json bumped to $NEW_VERSION"

      - name: Bump version in packages (ordered)
        run: |
          # Source the shared package configuration
          source .github/scripts/package-config.sh

          NEW_VERSION="${{ steps.version-root.outputs.new_version }}"
          VERSION_NUMBER="${NEW_VERSION#v}"  # Remove 'v' prefix

          # Define the version bump handler function
          process_version() {
            local package_name="$1"
            local package_path="$2"
            
            echo "üîÑ Updating version in $package_path to $VERSION_NUMBER"
            
            # Update package version using Node.js instead of npm version (which can fail in workspaces)
            node -e "
              const fs = require('fs');
              const path = './$package_path/package.json';
              const pkg = JSON.parse(fs.readFileSync(path, 'utf8'));
              pkg.version = '$VERSION_NUMBER';
              fs.writeFileSync(path, JSON.stringify(pkg, null, 2) + '\n');
              console.log('Updated ' + pkg.name + ' to version $VERSION_NUMBER');
            "
            
            # Get the package name that was just version bumped
            local bumped_package_name=$(node -e "console.log(require('./$package_path/package.json').name)")
            
            echo "üîç Checking for packages that depend on $bumped_package_name..."
            
            # Find all packages that depend on the package that was just bumped
            for other_package in packages/*; do
              if [ -d "$other_package" ] && [ -f "$other_package/package.json" ] && [ "$other_package" != "$package_path" ]; then
                # Check if this package has a dependency on the bumped package
                local has_dependency=$(node -e "
                  const pkg = JSON.parse(require('fs').readFileSync('$other_package/package.json', 'utf8'));
                  const deps = { ...pkg.dependencies, ...pkg.devDependencies, ...pkg.peerDependencies };
                  console.log(deps['$bumped_package_name'] ? 'true' : 'false');
                ")
                
                if [ "$has_dependency" = "true" ]; then
                  local other_package_name=$(basename "$other_package")
                  echo "üîó Updating $other_package_name dependency on $bumped_package_name"
                  
                  # Update the dependency version using Node.js with workspace protocol
                  node -e "
                    const fs = require('fs');
                    const pkg = JSON.parse(fs.readFileSync('$other_package/package.json', 'utf8'));
                    
                    // Update in dependencies using workspace protocol for internal packages
                    if (pkg.dependencies && pkg.dependencies['$bumped_package_name']) {
                      pkg.dependencies['$bumped_package_name'] = 'workspace:^$VERSION_NUMBER';
                    }
                    
                    // Update in devDependencies using workspace protocol for internal packages
                    if (pkg.devDependencies && pkg.devDependencies['$bumped_package_name']) {
                      pkg.devDependencies['$bumped_package_name'] = 'workspace:^$VERSION_NUMBER';
                    }
                    
                    // Update in peerDependencies using workspace protocol for internal packages
                    if (pkg.peerDependencies && pkg.peerDependencies['$bumped_package_name']) {
                      pkg.peerDependencies['$bumped_package_name'] = 'workspace:^$VERSION_NUMBER';
                    }
                    
                    fs.writeFileSync('$other_package/package.json', JSON.stringify(pkg, null, 2) + '\n');
                  "
                  
                  echo "‚úÖ Updated $other_package_name dependency to ^$VERSION_NUMBER"
                fi
              fi
            done
          }

          # Process packages in the defined order
          process_packages_in_order "version"

      - name: Update pnpm lockfile
        run: pnpm install --lockfile-only

      - name: Commit version changes
        run: |
          NEW_VERSION="${{ steps.version-root.outputs.new_version }}"
          git add .
          git commit -m "chore: bump version to $NEW_VERSION

          - Updated all workspace packages to $NEW_VERSION
          - Updated cross-package dependencies automatically"

      - name: Create and push tag
        run: |
          NEW_VERSION="${{ steps.version-root.outputs.new_version }}"
          git tag "$NEW_VERSION"
          git push origin main
          git push origin "$NEW_VERSION"
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version-root.outputs.new_version }}
          name: Release ${{ steps.version-root.outputs.new_version }}
          body: |
            ## Changes in ${{ steps.version-root.outputs.new_version }}

            This release was automatically created by the version bump workflow.

            ### Packages Updated:
            All workspace packages have been updated to ${{ steps.version-root.outputs.new_version }}

            ### Dependencies Updated:
            Cross-package dependencies have been automatically updated to maintain consistency

            See the [full changelog](https://github.com/${{ github.repository }}/compare/v0.1.0...${{ steps.version-root.outputs.new_version }}) for more details.
          draft: false
          prerelease: ${{ steps.version-root.outputs.is_prerelease == 'true' }}
