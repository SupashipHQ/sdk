name: Version Bump and Release

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - major
          - minor
          - patch
          - premajor
          - preminor
          - prepatch
          - prerelease
      prerelease_id:
        description: 'Prerelease identifier (only used for prerelease versions)'
        required: false
        type: choice
        options:
          - alpha
          - beta
          - rc
          - dev
          - canary
          - next

jobs:
  version-bump:
    runs-on: ubuntu-latest
    name: Bump Version and Create Release
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Configure git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run tests
        run: pnpm test

      - name: Build packages
        run: pnpm build

      - name: Bump version in root package.json
        id: version-root
        run: |
          VERSION_TYPE="${{ github.event.inputs.version_type }}"
          PRERELEASE_ID="${{ github.event.inputs.prerelease_id }}"

          # Handle prerelease versions
          if [[ "$VERSION_TYPE" == pre* ]]; then
            # Use default 'beta' if no prerelease_id is provided for prerelease versions
            if [[ -z "$PRERELEASE_ID" ]]; then
              PRERELEASE_ID="beta"
              echo "⚠️  No prerelease identifier provided, defaulting to 'beta'"
            fi
            NEW_VERSION=$(npm version "$VERSION_TYPE" --preid="$PRERELEASE_ID" --no-git-tag-version)
            echo "🧪 Creating prerelease version with identifier: $PRERELEASE_ID"
            echo "is_prerelease=true" >> $GITHUB_OUTPUT
          else
            NEW_VERSION=$(npm version "$VERSION_TYPE" --no-git-tag-version)
            echo "🚀 Creating stable release version"
            echo "is_prerelease=false" >> $GITHUB_OUTPUT
          fi

          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "Root package.json bumped to $NEW_VERSION"

      - name: Bump version in packages (ordered)
        run: |
          # Source the shared package configuration
          source .github/scripts/package-config.sh

          NEW_VERSION="${{ steps.version-root.outputs.new_version }}"
          VERSION_NUMBER="${NEW_VERSION#v}"  # Remove 'v' prefix

          # Define the version bump handler function
          process_version() {
            local package_name="$1"
            local package_path="$2"
            
            echo "🔄 Updating version in $package_path to $VERSION_NUMBER"
            cd "$package_path"
            
            # Set the exact version from root
            npm version "$VERSION_NUMBER" --no-git-tag-version
            
            cd ../..
            
            # Special handling: when javascript package is bumped, update react's dependency
            if [ "$package_name" = "javascript" ]; then
              echo "🔗 Updating React package dependency on JavaScript package"
              cd "packages/react"
              
              # Update the dependency version using npm
              npm pkg set dependencies.@darkfeature/sdk-javascript="^$VERSION_NUMBER"
              
              cd ../..
              echo "✅ Updated React package dependency to ^$VERSION_NUMBER"
            fi
          }

          # Process packages in the defined order
          process_packages_in_order "version"

      - name: Update pnpm lockfile
        run: pnpm install --lockfile-only

      - name: Commit version changes
        run: |
          NEW_VERSION="${{ steps.version-root.outputs.new_version }}"
          git add .
          git commit -m "chore: bump version to $NEW_VERSION

          - Updated @darkfeature/sdk-javascript to $NEW_VERSION
          - Updated @darkfeature/sdk-react to $NEW_VERSION
          - Updated React package dependency on JavaScript package"

      - name: Create and push tag
        run: |
          NEW_VERSION="${{ steps.version-root.outputs.new_version }}"
          git tag "$NEW_VERSION"
          git push origin main
          git push origin "$NEW_VERSION"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version-root.outputs.new_version }}
          name: Release ${{ steps.version-root.outputs.new_version }}
          body: |
            ## Changes in ${{ steps.version-root.outputs.new_version }}

            This release was automatically created by the version bump workflow.

            ### Packages Updated:
            - @darkfeature/sdk-javascript: ${{ steps.version-root.outputs.new_version }}
            - @darkfeature/sdk-react: ${{ steps.version-root.outputs.new_version }}

            ### Dependencies Updated:
            - React package now depends on JavaScript package ${{ steps.version-root.outputs.new_version }}

            See the [full changelog](https://github.com/${{ github.repository }}/compare/v0.1.0...${{ steps.version-root.outputs.new_version }}) for more details.
          draft: false
          prerelease: ${{ steps.version-root.outputs.is_prerelease == 'true' }}
